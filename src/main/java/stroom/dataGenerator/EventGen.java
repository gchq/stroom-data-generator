/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stroom.dataGenerator;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
import stroom.dataGenerator.config.EventGenConfig;
import stroom.dataGenerator.config.EventStreamConfig;

import javax.swing.text.DateFormatter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.time.Instant;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;

public class EventGen {

    private final EventGenConfig config;

    public EventGen(String pathToConfig) throws IOException {
        ObjectMapper mapper = new ObjectMapper(new YAMLFactory());
        mapper.findAndRegisterModules().configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);;
        config = mapper.readValue(new File(pathToConfig), EventGenConfig.class);
    }

    public void go () throws IOException, TemplateProcessingException {

        List<EventStreamProcessor> streamProcessors = new ArrayList<>();
        for (EventStreamConfig streamConfig : config.getStreams()){
            streamProcessors.add(new EventStreamProcessor(config, streamConfig));
        }

        Random random = new Random(config.getSeed());
        Instant endTime = config.getStartTime().plus(config.getRunLength());
        Instant periodStart = config.getStartTime();

        while (periodStart.isBefore(endTime)){

            processTimePeriod (periodStart, streamProcessors, random);

            periodStart = periodStart.plus(config.getBatchDuration());
        }


    }

    public void processTimePeriod (Instant startTime, List<EventStreamProcessor> processors, Random random) throws
            IOException, TemplateProcessingException {
        final String periodName = DateTimeFormatter.ISO_INSTANT.format(startTime);
        for (EventStreamProcessor streamProcessor : processors){
            streamProcessor.process(periodName, startTime, startTime.plus(config.getBatchDuration()),random);
        }

    }


    public static void main(String[] args) {
        if (args.length != 1){
            System.err.println ("Please provide path to config YAML as application parameter");
        } else {
            try {
                EventGen app = new EventGen(args[0]);
                app.go();
            } catch (Exception ex){
                System.err.println ("Fatal Error due to " + ex.getMessage());
                ex.printStackTrace();
            }
        }
    }
}
