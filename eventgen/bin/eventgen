#!/bin/bash

#/*
# * Copyright 2020 Crown Copyright
# *
# * Licensed under the Apache License, Version 2.0 (the "License");
# * you may not use this file except in compliance with the License.
# * You may obtain a copy of the License at
# *
# *     http://www.apache.org/licenses/LICENSE-2.0
# *
# * Unless required by applicable law or agreed to in writing, software
# * distributed under the License is distributed on an "AS IS" BASIS,
# * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# * See the License for the specific language governing permissions and
# * limitations under the License.
# */

#Incrementally generates both older and current data, one hour at a time
#
#This script must be located in a directory containing eventgen.jar (can be symlink)
#

PROCNAME=$(basename $0)
if [ "$(pidof -x $PROCNAME)" != $$ ]
then
  echo "Another instance of this script is already running"
#  exit
fi

DIRNAME=$(dirname $0)

if (( $# < 5 ))
then
  echo "$PROCNAME is designed to be invoked multiple times, e.g. via cron in order to gradually generate data."
  echo
  echo "usage: $PROCNAME <config yaml> <task id> <state persistence directory> <earliest date to generate (inclusive)> <ROLLING | latest date to generate (exclusive)> [Eventgen options...]"
  echo
  echo "Rolling example: $PROCNAME /usr/local/etc/eventgen/config/events.yml rolling-events /var/local/eventgen/state 2020-06-01 ROLLING"
  echo "Non rolling example: $PROCNAME /usr/local/etc/eventgen/config/ref.yml backfill-reference /var/local/eventgen/state 2019-01-01 2019-12-31"
  exit 1
fi


function init () {
  STATEFILE=$1
  INITIAL_DATE=$2

  if [ ! -f $STATEFILE ]
  then
    #New statefile
    echo $INITIAL_DATE > $STATEFILE
  fi
}

function process () {
  STATEFILE=$1
  NEXT_PERIOD_DELTA=$2
  EARLIEST_EPOCH=$3
  LATEST_EPOCH=$4
  JAR=$5
  CONFIG=$6
  
  RUN_PERIOD=$(< $STATEFILE)
  PERIOD_EPOCH=$(date -u -d "$RUN_PERIOD" +%s)

  read RUN_PERIOD_TIME RUN_PERIOD_DATE <<< $RUN_PERIOD

  if (( $PERIOD_EPOCH >= $EARLIEST_EPOCH && $PERIOD_EPOCH <= $LATEST_EPOCH ))
  then
    java -jar $JAR $CONFIG -q -r PT1H -p "${RUN_PERIOD_DATE}T${RUN_PERIOD_TIME}.000Z" ${7} ${8} ${9} ${10} ${11} ${12} ${13} ${14} ${15} ${16}

    if (( $? == 0 ))
    then
      date -u -d "$RUN_PERIOD $NEXT_PERIOD_DELTA" +"%H:%M:%S %Y-%m-%d" > $STATEFILE
    fi
  fi
}

#----MAIN-----
CONFIG=$1
JAR="$DIRNAME/eventgen.jar"
if [ ! -f $JAR ]
then
  echo "Fatal: eventgen.jar (or symlink) must be located in the same directory as script ($DIRNAME)."
  exit 1
fi

TASK_ID=$2
STATE_DIR=$3
EARLIEST_DATE=$4

#Create state directory if needed
mkdir -p $STATE_DIR

STATEFILE_BASE=$STATE_DIR/$TASK_ID.$PROCNAME.state

STATEFILE_OLD=$STATEFILE_BASE".historic"
STATEFILE_NEW=$STATEFILE_BASE".current"

if [ "$5" != 'ROLLING' ]
then
  # Non-rolling
  LATEST_EPOCH=$(date -u +%s -d "$5")
  INITIAL_RUN_DATE="00:00:00 $5"
else
  HOUR_TRUNC_FORMAT='%Y-%m-%d %H':00:00
  LAST_HOUR_START=$(date -d "- 1 hour" -u +"$HOUR_TRUNC_FORMAT")
  LATEST_EPOCH=$(date -u +%s -d "$LAST_HOUR_START")
  INITIAL_RUN_DATE='00:00:00 '$(date -u +"%Y-%m-%d")
fi

INITIAL_RUN_DATE_OLD=$(date -u -d "$INITIAL_RUN_DATE - 1 hour" +"%H:%M:%S %Y-%m-%d")
init ${STATEFILE_OLD} "${INITIAL_RUN_DATE_OLD}"
init ${STATEFILE_NEW} "${INITIAL_RUN_DATE}"

EARLIEST_EPOCH=$(date -u +%s -d "$EARLIEST_DATE")

process ${STATEFILE_OLD} "- 1 hour" "$EARLIEST_EPOCH" "$LATEST_EPOCH" "$JAR" "$CONFIG" ${6} ${7} ${8} ${9} ${10} ${11} ${12} ${13} ${14} ${15}

if (( $# < 5 ))
then
  process ${STATEFILE_NEW} "+ 1 hour" "$EARLIEST_EPOCH" "$LATEST_EPOCH" "$JAR" "$CONFIG" ${6} ${7} ${8} ${9} ${10} ${11} ${12} ${13} ${14} ${15}
fi



